#!/usr/bin/env perl
# Script to generate the VIM syntax file for FDS version 5 and up.
# fds_make_syn.pl
# 
# VERSION 0.1
# June 1 2008
#
# usage:
#  1) clone a copy of the Git Repository:
#	$git clone https://github.com/firemodels/fds.git
#  2) show the list of tags to get the latest stable release:
#  	$cd fds
#  	$git tag
#  	FDS0
#  	FDS6.5.3
#  	FDS6.6.0
#  	FDS6.7.0
#  	...
#  3) checkout the latest stable release
#  	$git checkout 'FDS6.7.0'
#
#  4) switch to the Source dir, then run the script:
#  fds_make_syn.pl 
#  The script will find all files with the NAMELIST keyword and and parses all the lines: NAMELIST ....
#  to get all the syntax keywords
# 
# outputs fds.vim
#
# Place the fds.vim file in the $VIM/syntax folder
# add the line:
# 	au BufNewFile,BufRead *.fds	setf fds
#
# To the filetype.vim file
#
# NOTES:
#
#
# Written and developed by Andrew Louie, 

# DIRECTIVES ###############################################

use strict;
use warnings;

# MAIN PROGRAM EXECUTION

my @files;
my %NL;
my %FNAME;
my $out;
my $syn_file = "fds.vim";

# Open the input file
#if( !-e $file){ checkout(\$file);}
#checkout(@files);
#
#Find all the files with the NAMELIST keyword
my $fnames = `grep -l "NAMELIST" * | xargs`;
my @ftemp = split(' ',$fnames);
#skip the vim file if it is in the folder.
while(@ftemp){
	my $i = pop @ftemp;
	push @files,$i unless($i=~/\.vim$/);
}


print "Processing files: @files\n";


# Print all the header stuff before the syntax key words:
print_header();

while(@files){
	my $f = pop @files;

	open(FDSIN, "$f") || die "unable to open $f $!";

while(<FDSIN>){
	if($_ =~ /NAMELIST \/(\w+)\/\s(.*)/){
		my $name = $1;
		my $ar = $2;
		$ar =~s/\s+$//;
		$NL{$name}=[split(/,/,$ar)];
		$FNAME{$name}=$f; 
		my $done = 1;
		MORE: while($done){
			if(${ $NL{$name} }[-1] =~/&/){
				${ $NL{$name} }[-1] =~s/\s*&\s*//;
				my $l = <FDSIN>;
				$l =~s/^\s+//;
				$l =~s/!.*//; # Remove Trailing Comments
				$l =~s/\s+$//;# Remove trailing spaces
				push @{ $NL{$name} },split(/,/,$l);
				next MORE;
			}else{$done = 0;}
		}
	}

}
close(FDSIN);

}


	open(SYNOUT,">>$syn_file") || die "unable to open $syn_file for writing\n";

foreach my $k (sort keys %NL ){
	print SYNOUT "\" $k ($FNAME{$k})\n";

	print SYNOUT "syn keyword NAMELIST $k\n";

	my @TNL;
	my $i;
	while(@{ $NL{$k} }){
		$i++;
		push( @TNL, pop	@{ $NL{$k} });
	       	if($i%8 == 0){
			$out ="syn keyword FDS5PA " . join(" ",@TNL) . "\n";
			print SYNOUT $out; 
			@TNL=();
		}
	}
	$out ="syn keyword FDS5PA " . join(" ",@TNL) . "\n";
	print SYNOUT $out if(@TNL); 


}

print_footer();

print "generated \"$syn_file\"\n";
print "\ncopy $syn_file to $ENV{HOME}/vimfiles/syntax\n";
## print "copying $syn_file to  ~/.vim/syntax/$syn_file...";
## system("cp $syn_file ~/.vim/syntax/$syn_file") == 0 or die "Unable to copy $syn_file to ~/.vim/syntax/ - $?\n";

print "Done!\n";

sub print_header{

	my $date1 = datefix();
	my $date = "${ $date1 }[4] ${ $date1 }[3], ${ $date1 }[5]";
	### Get the tag/revision of the source
	my $FDSVER = qx/git show --oneline --abbrev-commit/;


	open(SYNOUT,">$syn_file") || die "unable to open $syn_file for writing\n";

	print SYNOUT "\" Vim syntax file generated by fds_make_syn.pl\n";
	print SYNOUT "\" Vim Syntax file generated for FDS version:\n";
	print SYNOUT "\"    $FDSVER\n";
	print SYNOUT "\"--------------------------------------------------\n";
	print SYNOUT "\" Language:     fds v. 4,5,6 input files\n";
	print SYNOUT "\" Maintainer:   Andrew Louie <andrew.louie\@wsp.com>\n";
	print SYNOUT "\" Last change:  $date\n";
	print SYNOUT "\" Updated(2018-06-29):\n"; 
	print SYNOUT "\" Will find all source files with NAMELIST keywords\n"; 
	print SYNOUT "\" Updated(2016-08-12):\n"; 
	print SYNOUT "\" Now pulls from Git instead of SVN\n"; 
	print SYNOUT "\" Updated(2012-08-21):\n"; 
	print SYNOUT "\" Now Reads hvac.f90 to highlight hvac keywords\n"; 
	print SYNOUT "\" -------------------------------------------------\n"; 
	print SYNOUT "\" TO USE:                                          \n"; 
	print SYNOUT "\" copy $syn_file to \$HOME/vimfiles/syntax\n";
	print SYNOUT "\" add the following line to the \$HOME/vimfiles/filetype.vim\n";
	print SYNOUT "\" augroup filetypedetect\n";
	print SYNOUT "\" au BufNewFile,BufRead *.fds setf fds\n";
	print SYNOUT "\" augroup END\n";
	print SYNOUT "\" -------------------------------------------------\n"; 
	print SYNOUT "\" fds4 reads files that end in *.data\n"; 
	print SYNOUT "\" fds5 reads files of any ext, but normally used .fds or .fds5\n";
	print SYNOUT "\" For version 5.x: Clear all syntax items\n";
	print SYNOUT "\" For version 7.x: Quit when a syntax file was already loaded\n";
	print SYNOUT "if version < 700\n";
	print SYNOUT "syntax clear\n";
	print SYNOUT "elseif exists(\"b:current_syntax\")\n";
	print SYNOUT "  finish\n";
	print SYNOUT "endif\n";
	print SYNOUT "\n";
	print SYNOUT "syn case match\n";
	print SYNOUT "\n";
	print SYNOUT "\"set unusal keywords\n";
	print SYNOUT "setlocal iskeyword+=_\n";
	print SYNOUT "\n";
	print SYNOUT "\" keywords NAMELIST Parameters\n";
	print SYNOUT "\"\n";
	print SYNOUT "\" Obselete NAMELIST-Keywords from FDS4\n";
	print SYNOUT "syn keyword FDS4OBS HEAT PIPE PL3D SMOD SPRK THCP GRID PDIM\n";
	print SYNOUT "\n";
}

sub print_footer{

	open(SYNOUT,">>$syn_file") || die "unable to open $syn_file for writing\n";

	print SYNOUT "syn match hBool /\\(\\.TRUE\\.\\)\\|\\(\\.FALSE\\.\\)/ contained\n";
	print SYNOUT "\n";
	print SYNOUT "\"Numbers of various sorts, Copied the Fortran syntax file\n";
	print SYNOUT "\n";
	print SYNOUT "\" Integers\n";
	print SYNOUT "syn match FDSInteger	display \"\\<\\d\\+\\(_\\a\\w*\\)\\=\\>\"\n";
	print SYNOUT "\" floating point number, without a decimal point\n";
	print SYNOUT "syn match FDSFloat	display	\"\\<\\d\\+[deq][-+]\\=\\d\\+\\(_\\a\\w*\\)\\=\\>\"\n";
	print SYNOUT "\" floating point number, starting with a decimal point\n";
	print SYNOUT "syn match FDSNumber 	display \"\\<\\.\\d\\+\\([deq][-+]\\=\\d\\+\\)\\=\\(_\\a\\w*\\)\\=\\>\"\n";
	print SYNOUT "\" floating point number, no digits after decimal\n";
	print SYNOUT "syn match FDSNumber	display \"\\<\\d\\+\\.\\([deq][-+]\\=\\d\\+\\)\\=\\(_\\a\\w*\\)\\=\\>\"\n";
	print SYNOUT "\" floating point number, D or Q exponents\n";
	print SYNOUT "syn match FDSNumber	display	\"\\<\\d\\+\\.\\d\\+\\([dq][-+]\\=\\d\\+\\)\\=\\(_\\a\\w*\\)\\=\\>\"\n";
	print SYNOUT "\" floating point number\n";
	print SYNOUT "syn match FDSNumber	display	\"\\<\\d\\+\\.\\d\\+\\(e[-+]\\=\\d\\+\\)\\=\\(_\\a\\w*\\)\\=\\>\"\n";
	print SYNOUT "\n";
	print SYNOUT "syn match FDSOperator	\"\\(\\(>\\|<\\)=\\=\\|==\\|/=\\|=\\)\"\n";
	print SYNOUT "\n";
	print SYNOUT "\" strings, enclosed in single or double quotes\n";
	print SYNOUT "syntax region hString start=/\"\\|\'/ end=/\"\\|\'/ contained\n";
	print SYNOUT "\n";
	print SYNOUT "\" instructions - Anything that begins with & and end with /\n";
	print SYNOUT "syn region instructions start=/^\\s*&/ end=/[/]/ contains=FDS4OBS,hstring,FDS5PA,NAMELIST,FDSNumber,FDSFloat,FDSInteger,FDSOperator,hBool contained\n";
	print SYNOUT "\n";
	print SYNOUT "\" comments: everything is a comment, unless it is an instruction, see above\n";
	print SYNOUT "syn match  comment /.*/ contains=instructions\n";
	print SYNOUT "\n";
	print SYNOUT "\" syntax sync\n";
	print SYNOUT "syntax sync minlines=150\n";
	print SYNOUT "syn case match\n";
	print SYNOUT "\n";
	print SYNOUT "\" Define the default highlighting.\n";
	print SYNOUT "\" For version 5.7 and earlier: only when not done already\n";
	print SYNOUT "\" For version 5.8 and later: only when an item doesn't have highlighting yet\n";
	print SYNOUT "if version >= 508 || !exists(\"did_blank_syntax_inits\")\n";
	print SYNOUT "  if version < 508\n";
	print SYNOUT "    let did_blank_syntax_inits = 1\n";
	print SYNOUT "    command -nargs=+ HiLink hi link <args>\n";
	print SYNOUT "  else\n";
	print SYNOUT "    command -nargs=+ HiLink hi def link <args>\n";
	print SYNOUT "  endif\n";
	print SYNOUT "\n";
	print SYNOUT "  HiLink FDS4OBS		Error\n";
	print SYNOUT "  HiLink instructions		Statement\n";
	print SYNOUT "  HiLink FDSNumber 		Number\n";
	print SYNOUT "  HiLink FDSInteger		Number\n";
	print SYNOUT "  HiLink FDSFloat		Number\n";
	print SYNOUT "  HiLink hBool			Boolean\n";
	print SYNOUT "  HiLink comment		Comment\n";
	print SYNOUT "  HiLink hString		String\n";
	print SYNOUT "  HiLink FDS5PA			Identifier\n";
	print SYNOUT "  HiLink NAMELIST		PreProc\n";
	print SYNOUT "  HiLink FDSOperator	        Operator\n";
	print SYNOUT "\n";
	print SYNOUT "  delcommand HiLink\n";
	print SYNOUT "endif\n";
	print SYNOUT "let b:current_syntax = \"fds\"\n";
	print SYNOUT "\" vim: ts=8\n";

}
sub datefix{
# set the date first

my @time = localtime(time);
$time[5] +=1900;
$time[4] = qw(Jan Feb Mar Apr May Jun Jul Aug Sept Oct Nov Dec)[$time[4]];

#return "$time[4] $time[3], $time[5]";
return \@time;
}

sub checkout{
	my @files = @_;

	my $repo = "https://raw.githubusercontent.com/firemodels/fds-smv/development/FDS_Source/";
	
	while(@files){
		my $f = pop @files;
	print "Downloading $repo/$f...";
	system("wget -q -O$f $repo/$f") == 0 or die "Unable to export - $?\n";
	print "Done!\n";
	}
	return;

}

	
